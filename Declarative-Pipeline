pipeline{
        agent any
	
        tools{
		    maven 'maven3.9.0'
		}
		stages{
		      stage('Checkout Code SCM'){
			       steps{
			                 emailext body: 'Build has Started', recipientProviders: [buildUser()], subject: 'Declarative-Way Build Notification', to: 'naveensai.thummala@gmail.com'
				         notifyBuild('STARTED')
				        git branch: 'development', credentialsId: '629f01a2-b69c-4ddb-84c9-fd4b7ef68f76', url: 'https://github.com/NaveenSai1605/maven-web-application.git'
				    }
			  }//Git Close
			  stage('Maven Build'){
			       steps{
					    sh "mvn clean package"
				   }
			  }//Build Close
			  stage('SonarQube Report'){
			       steps{
				        sh "mvn sonar:sonar"
				   }
			  }//Sonarqube close
			  stage('Artifact To Nexus'){
			       steps{
				       sh "mvn deploy"
				   }
			  }//Artifactory Close
			  /*
			  stage('Application Deploy to Tomcat'){
			      steps{
				     sshagent(['74ac16d7-45cd-4440-8b24-16ea7c173ee7']) {
				             sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@13.126.203.52:/opt/apache-tomcat-9.0.71/webapps"
				     }
				  }
			  }//Tomcat Close
			  */
		}//Stages close
		post {
            aborted {
                   notifyBuild('ABORTED')
		   emailext body: 'Build Aborted', recipientProviders: [buildUser()], subject: 'Declarative-Way Build Notification', to: 'naveensai.thummala@gmail.com'
           }//Aborted Close
            success {
                   notifyBuild('SUCCESS')  
		   emailext body: 'Build Success', recipientProviders: [buildUser()], subject: 'Declarative-Way Build Notification', to: 'naveensai.thummala@gmail.com'
           }//Success close
           failure {
                   notifyBuild('FAILURE')
		   emailext body: 'Build Failed', recipientProviders: [buildUser()], subject: 'Declarative-Way Build Notification', to: 'naveensai.thummala@gmail.com'
           }//Failure Close
       }//post close
}//Pipeline close

//Slack Notifications
def notifyBuild(String buildStatus = 'STARTED') 
{
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESS'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESS') {
    color = 'GREEN'
    colorCode = '#00FF00'
	} else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary, channel: "#general")
}
